*----------------------------------------------------------------------
* Programmer: Pranav Kalra
* Class Account: cscc
* Assignment or Title: 
* Filename: prog3.s
* Date completed: April 23
*----------------------------------------------------------------------
* Problem statement:
* Input: 
* Output: 
* Error conditions tested: 
* Included files: 
* Method and/or pseudocode: 
* References: 
*----------------------------------------------------------------------
*
        ORG     $0
        DC.L    $3000           * Stack pointer value after a reset
        DC.L    start           * Program counter value after a reset
        ORG     $3000           * Start at location 3000 Hex
*
*----------------------------------------------------------------------
*
*  File: /home/cs/faculty/riggins/bsvc/macros/iomacs.s
*  I/O initialization and macro definitions for use with 68kpp.  
*  Macros by Alan Riggins and Sara Baase
*  Trap14 atof by Huijuan Hyun, Summer 2004.
*  All other trap14 code written by Alan Riggins, summer 2012
*  Last modified: August 15,2012 by Alan Riggins
*
*  Trap code definitions, etc.
*
.INIT13 equ     $0000           *Initialize I/O (SCI)
.INIT14 equ     $0000
.INSTR  equ     $0001           *Input a line from keyboard
.INFLO  equ     $0001
.INCHR  equ     $0002           *Input a character from keyboard
.ATOUN	equ     $0002		*convert string to unpack floating number
.UNTOPA	equ     $0003
.OUTCHR equ     $0003           *Output a character to screen
.PATOUN	equ     $0004
.ADD	equ     $0006		*Add two floating point numbers
.OUTSTR equ     $0004           *Output a string
.MUL	equ     $0007		*Multiply two floating point numbers
.DIV	equ     $0008
.CVTA2  equ     $0005           *Convert ascii to 2's complement
.FTOA	equ     $0005
.CVT2A  equ     $0006           *Convert 2's complement to ascii
.SQRT   equ     $0009
.CMP    equ     $000A
.POW    equ     $000B
.ITOF   equ     $000C           * convert int to float
.FTOI   equ     $000D           * convert float to int
VEC13	equ     (32+13)*4       *Trap 13 vector address
VEC14	equ     (32+14)*4
ADDR13  equ     $5000           *Trap 13 handler address
ADDR14	equ     $5200
LINEFEED equ	10	        *LineFeed Character value
CARR_RETURN equ 13	        *CarriageReturn Character value
*


    
        


* Two args, first the destination, second the number of digits to print
* The source must be in D0 as a longword
    








* Sets the CCR

    
    
    
            
** trap13 macros follow

    
    
    
  
     
 
                  		
                  		

*===================
*
*  File: evtmacs.s
*  EVT initialization and macro definitions for use with 68kpp.  
*  Macro by Huijuan Yin
*  Last modified: December 2003
*



*
*----------------------------------------------------------------------
*
* Register use
*
*----------------------------------------------------------------------
*
start:
*       start: initIO 
   move.l  #ADDR13,VEC13
   trap    #13
   dc.w    .INIT13
*       END OF MACRO EXPANSION

*       setEVT  
	move.l	#$5f00,8
	move.l	#$5f80,12
	move.l	#$6100,16
	move.l 	#$6900,20
*       END OF MACRO EXPANSION

*       initF  
	move.l 	#ADDR14,VEC14
	trap	#14
	dc.w	.init14
*       END OF MACRO EXPANSION


				* Your code goes HERE
*       lineout titleLine 
	pea	titleLine
	trap	#13
	dc.w	.OUTSTR
	adda.l	#4,sp
*       END OF MACRO EXPANSION

*       lineout skipln 
	pea	skipln
	trap	#13
	dc.w	.OUTSTR
	adda.l	#4,sp
*       END OF MACRO EXPANSION

*       lineout intPrompt 
	pea	intPrompt
	trap	#13
	dc.w	.OUTSTR
	adda.l	#4,sp
*       END OF MACRO EXPANSION

*       linein intInput 
	pea	intInput
	trap	#13
	dc.w	.INSTR
	adda.l	#4,sp
	tst.l   d0
*       END OF MACRO EXPANSION

	       


        break                   * Terminate execution
*
*----------------------------------------------------------------------
*       Storage declarations

				* Your storage declarations go 
				* HERE
				
	titleLine:	dc.b	'Program #3, Pranav Kalra, cssc1592',0
	intPrompt:	dc.b	'Enter an integer to factor (2..65535):',0
	skipln:		dc.b	0
	intInput:	ds.b	80
       
       
       
       
        end
